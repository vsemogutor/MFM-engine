<?xml version="1.0" encoding="utf-8"?>
<mx:Box xmlns:mx="http://www.adobe.com/2006/mxml" width="400" height="32">
	
		<mx:Tile id="pnlSpells" height="32" width="100%" tileWidth="30" tileHeight="30" verticalGap="3" horizontalGap="3">		
		</mx:Tile>	

	<mx:Script>
		<![CDATA[
			import engine.units.groups.UnitGroup;
			import engine.units.UnitTypes;
			import engine.units.Unit;
			import mx.controls.Button;
			import engine.game.Game;
			import engine.userAction.UserActionOrderUnitCast;
			import engine.userAction.UserActionBase;
			import engine.spells.SpellType;
			import sound.Sounds;
			import engine.units.UnitOrders.UnitOrderCastSpell;
			import engine.units.support.UnitSpellItem;
			import __AS3__.vec.Vector;
			import controls.ImageButton;
			import controls.TypeTooltip;
			import mx.events.ToolTipEvent;
			
			private var _group:UnitGroup;
			
			public function get dataSource():UnitGroup{
				return _group;
			}

			public function set dataSource(value:UnitGroup):void{
				if (_group && _group.selectedUnit != value.selectedUnit)
				{
					pnlSpells.visible = false;
				}
				
				_group = value;
				refreshChildren();
			}
			
			private function refreshChildren():void
			{				
				if (!_group)
					return;
					
				var unit:Unit = _group.selectedUnit;
				
				if (!unit || !unit.isReady || !unit.isActive || !unit.fraction.isCurrentPlayer() || unit.type.type != UnitTypes.Hero)
				{	
					pnlSpells.visible = false;
					return;
				}
				
				pnlSpells.visible = true;
				refreshSpellsPanel(unit);
			}
		
			private function refreshSpellsPanel(unit:Unit):void
			{
				if (pnlSpells.visible)
				{					
					var spells:Vector.<UnitSpellItem> = unit.getSpellList();
					for (var i:int = 0; i < spells.length; ++i)
					{
						var spButton:ImageButton;
						if (i < pnlSpells.numChildren)
						{
							spButton = pnlSpells.getChildAt(i) as ImageButton;
						}
						else 
						{
							spButton = new ImageButton();

							spButton.toolTip = " ";
							spButton.addEventListener(ToolTipEvent.TOOL_TIP_CREATE, TypeTooltip.create);
							spButton.addEventListener(ToolTipEvent.TOOL_TIP_SHOW, TypeTooltip.show);
							pnlSpells.addChild(spButton);
						}
						
						spButton.onClickHandler = onSpellSelectedClick;
						spButton.onDoubleClickHandler = onSpellSetActiveClick;
						
						spButton.doubleClickSound = Sounds.autocastClick;
										
						var spellItem:UnitSpellItem = spells[i];
						spButton.data = spellItem.type;
						spButton.enabled = spellItem.avaliable;
						spButton.setImage(spellItem.type.icon);
						spButton.setProgress( (spellItem.type.cooldown - spellItem.cooldown)/spellItem.type.cooldown);
						
						const quickButtons:Array = ["`", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "-", "+", "y", "u", "i", "o"];
						if (i + 1 < quickButtons.length)
						{
							spButton.quickButton = spButton.label  = quickButtons[i + 1];
						}
						
						var castOrder:UnitOrderCastSpell = unit.order as UnitOrderCastSpell;
						spButton.active	= (spellItem.type == unit.activeSpell);
						spButton.selected = spButton.active || (castOrder && castOrder.spellType == spellItem.type); 
						spButton.visible = true;
					}
					
					for (var i:int = spells.length; i < pnlSpells.numChildren; ++i)
					{
						pnlSpells.getChildAt(i).visible = false;
					}
				}
			}
			
			public function onSpellSelectedClick(btn:Button):void
			{
				var spellType:SpellType = btn.data as SpellType;
				var action:UserActionBase = new UserActionOrderUnitCast(
					Game.instance().selectionManager.selectedUnitGroup, spellType);
				Game.instance().userActionManager.setAction(action);
			}
			
			public function onSpellSetActiveClick(btn:Button):void
			{
				var spellType:SpellType = btn.data as SpellType;
				
				// toggle?
				if (spellType == Game.instance().selectionManager.selectedUnit.activeSpell)
					spellType = null;
				
				Game.instance().selectionManager.selectedUnit.setActiveSpell(spellType);
				Game.instance().userActionManager.defaultAction();
			}			
		]]>
	</mx:Script>
</mx:Box>
